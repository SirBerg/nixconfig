#Common Nix Packages
{ options, config, lib, pkgs, ...}:

with lib;
with lib.types;
let
	cfg = config.boerg.docker.containers.traefik;
in
{
	options.boerg.docker.containers.traefik.enable = mkOption {
		type = bool;
		default = false;
	};

	config = mkIf cfg.enable {
        boerg.virt.docker.enable = true;
        # Containers
        virtualisation.oci-containers.containers."traefik-overlord" = {
        image = "traefik:latest";
        environmentFiles = [
          "/etc/nixos/modules/nixos/docker/traefik/.env"
        ];
        volumes = [
          "/etc/nixos/modules/nixos/docker/traefik/config:/etc/traefik:rw"
          "/var/run/docker.sock:/var/run/docker.sock:rw"
        ];
        ports = [
          "80:80/tcp"
          "443:443/tcp"
        ];
        labels = {
          "traefik.enable" = "true";
          "traefik.http.routers.traefik.entryPoints" = "https";
          "traefik.http.routers.traefik.rule" = "Host(`overlord.naibu.boerg.co`)";
          "traefik.http.services.traefik.loadbalancer.server.port" = "8080";
        };
        log-driver = "journald";
        extraOptions = [
          "--network-alias=overlord"
          "--network=proxy_default"
          "--network=vaultwarden"
        ];
        };
        systemd.services."docker-traefik-overlord" = {
        serviceConfig = {
          Restart = lib.mkOverride 90 "always";
          RestartMaxDelaySec = lib.mkOverride 90 "1m";
          RestartSec = lib.mkOverride 90 "100ms";
          RestartSteps = lib.mkOverride 90 9;
        };
        after = [
          "docker-network-proxy_default.service"
        ];
        requires = [
          "docker-network-proxy_default.service"
        ];
        partOf = [
          "docker-compose-traefik-root.target"
        ];
        wantedBy = [
          "docker-compose-traefik-root.target"
        ];
        };

        # Networks
        systemd.services."docker-network-proxy_default" = {
        path = [ pkgs.docker ];
        serviceConfig = {
          Type = "oneshot";
          RemainAfterExit = true;
          ExecStop = "docker network rm -f proxy_default";
        };
        script = ''
          docker network inspect proxy_default || docker network create proxy_default --subnet=10.123.0.0/24
        '';
        partOf = [ "docker-compose-traefik-root.target" ];
        wantedBy = [ "docker-compose-traefik-root.target" ];
        };

        # Root service
        # When started, this will automatically create all resources and start
        # the containers. When stopped, this will teardown all resources.
        systemd.targets."docker-compose-traefik-root" = {
        unitConfig = {
          Description = "Root target generated by compose2nix.";
        };
        wantedBy = [ "multi-user.target" ];
        };
	};
}
