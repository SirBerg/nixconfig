#Common Nix Packages
{ options, config, lib, pkgs, ...}:

with lib;
with lib.types;
let
	cfg = config.boerg.docker.containers.mealie;
in
{
	options.boerg.docker.containers.mealie.enable = mkOption {
		type = bool;
		default = false;
	};

	config = mkIf cfg.enable {
        boerg.virt.docker.enable = true;


  # Containers
  virtualisation.oci-containers.containers."mealie" = {
    image = "ghcr.io/mealie-recipes/mealie:v1.3.2";
    environment = {
      "ALLOW_SIGNUP" = "true";
      "BASE_URL" = "https://mealie.naibu.boerg.co";
      "DB_ENGINE" = "postgres";
      "MAX_WORKERS" = "1";
      "PGID" = "1000";
      "POSTGRES_DB" = "mealie";
      "POSTGRES_PASSWORD" = "mealie";
      "POSTGRES_PORT" = "5432";
      "POSTGRES_SERVER" = "postgres";
      "POSTGRES_USER" = "mealie";
      "PUID" = "1000";
      "TZ" = "America/Anchorage";
      "WEB_CONCURRENCY" = "1";
    };
    volumes = [
      "/etc/nixos/modules/nixos/docker/mealie/mealie-data:/app/data:rw"
    ];
    labels = {
      "traefik.enable" = "true";
      "traefik.http.routers.mealie.entryPoints" = "https";
      "traefik.http.routers.mealie.rule" = "Host(`meals.naibu.boerg.co`)";
      "traefik.http.services.mealie.loadbalancer.server.port" = "9000";
    };
    dependsOn = [
      "mealie-postgres"
    ];
    log-driver = "journald";
    extraOptions = [
      "--memory=1048576000b"
      "--network-alias=mealie"
      "--network=mealie_mealie_default"
      "--network=proxy_default"
    ];
  };
  systemd.services."docker-mealie" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-mealie_mealie_default.service"
    ];
    requires = [
      "docker-network-mealie_mealie_default.service"
    ];
    partOf = [
      "docker-compose-mealie-root.target"
    ];
    wantedBy = [
      "docker-compose-mealie-root.target"
    ];
  };
  virtualisation.oci-containers.containers."mealie-postgres" = {
    image = "postgres:15";
    environment = {
      "DB_ENGINE" = "postgres";
      "POSTGRES_DB" = "mealie";
      "POSTGRES_PASSWORD" = "mealie";
      "POSTGRES_PORT" = "5432";
      "POSTGRES_SERVER" = "postgres";
      "POSTGRES_USER" = "mealie";
    };
    volumes = [
      "/etc/nixos/modules/nixos/docker/mealie/pgdata:/var/lib/postgresql/data:rw"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=postgres"
      "--network=mealie_mealie_default"
    ];
  };
  systemd.services."docker-mealie-postgres" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-mealie_mealie_default.service"
    ];
    requires = [
      "docker-network-mealie_mealie_default.service"
    ];
    partOf = [
      "docker-compose-mealie-root.target"
    ];
    wantedBy = [
      "docker-compose-mealie-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-mealie_mealie_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f mealie_mealie_default";
    };
    script = ''
      docker network inspect mealie_mealie_default || docker network create mealie_mealie_default
    '';
    partOf = [ "docker-compose-mealie-root.target" ];
    wantedBy = [ "docker-compose-mealie-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-mealie-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
  };
}
